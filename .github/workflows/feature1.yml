# Workflow to execute when Push to the feature1 branch

name: feature1 CI/CD wf

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ feature1 ]
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # First job to create a docker image
  build-image:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2 # Checking out the repo

    - name: Build and Publish head Docker image
      uses: VaultVulp/gp-docker-action@1.0.1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }} # Provide GITHUB_TOKEN to login into the GitHub Packages
        image-name: feature1 # Provide Docker image name
        dockerfile-path: create_image/Dockerfile 
        
        
  # Second job to use the image to run the services and test it
  run-and-test:
    # This job needs the build-image job to finish successfully in order to start
    needs: build-image
        
    runs-on: ubuntu-latest
    
    services:
    
      mariadb:
        image: mariadb:latest
        ports:
          - 3306
        env:
          MYSQL_ROOT_PASSWORD: secretDBpassword
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      opencms:
        image: ghcr.io/dbarroso/opencms_cicd:main
        ports:
          - 8080
        env:
          DB_HOST: mariadb
          DB_PASSWD: secretDBpassword
        
    steps:
      - uses: actions/checkout@v1

      - name: Verify MariaDB connection
        env:
          PORT: ${{ job.services.mariadb.ports[3306] }}
        run: |
          while ! mysqladmin ping -h"127.0.0.1" -P"$PORT" --silent; do
            sleep 1
          done  
      
      - name: Verify OpenCMS connection
        env:
          PORT: ${{ job.services.opencms.ports[8080] }}
        run: |
          while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:$PORT/opencms/system/login)" != "200" ]]; do sleep 1; done
      - name: Run k6 test
        env:
          PORT: 8080
          HOST: opencms
        uses: grafana/k6-action@v0.2.0
        with:
          filename: test.js
          flags: -e PORT=$PORT -e HOST=$HOST
